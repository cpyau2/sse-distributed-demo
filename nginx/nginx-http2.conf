# Worker processes
worker_processes auto;

# Error log
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Upstream backend servers (HTTPS)
    upstream backend {
        # IP hash for session stickiness (important for SSE)
        ip_hash;
        
        # Backend servers with health check parameters (‰øÆÊ≠£Á´ØÂè£)
        server backend-1:8443 max_fails=3 fail_timeout=30s;
        server backend-2:8443 max_fails=3 fail_timeout=30s;
        server backend-3:8443 max_fails=3 fail_timeout=30s;
        
        # Keep alive connections to backend
        keepalive 32;
    }
    
    # HTTP server (for health checks and redirects)
    server {
        listen 80;
        server_name localhost;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect to HTTPS for API calls
        location /api {
            return 301 https://$server_name$request_uri;
        }
        
        # Root location
        location / {
            return 301 https://$host:3443$request_uri;
        }
    }
    
    # HTTPS server with HTTP/2 (using self-signed cert for now)
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;
        
        # Generate temporary self-signed certificate
        ssl_certificate /etc/nginx/conf.d/server.crt;
        ssl_certificate_key /etc/nginx/conf.d/server.key;
        
        # SSL Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Max body size
        client_max_body_size 10M;
        
        # Health check endpoint for load balancer itself
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API and SSE endpoints
        location /api {
            # Proxy to backend with HTTP/2 frontend, HTTP/1.1 backend
            proxy_pass https://backend;
            proxy_http_version 1.1;
            
            # SSL proxy settings for HTTP/2
            proxy_ssl_verify off;
            proxy_ssl_session_reuse on;
            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            
            # General proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # SSE specific settings - CRITICAL for SSE
            proxy_set_header Connection '';
            proxy_buffering off;
            proxy_cache off;
            chunked_transfer_encoding off;
            
            # Disable buffering for SSE
            proxy_request_buffering off;
            
            # Long timeouts for SSE connections
            proxy_connect_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_read_timeout 3600s;
            
            # Keep alive for HTTP/2
            proxy_set_header Connection "keep-alive";
            
            # SSE specific headers
            add_header Cache-Control no-cache;
            add_header X-Accel-Buffering no;
            
            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        }
        
        # Root location - welcome page
        location / {
            add_header Content-Type text/html;
            return 200 '
<!DOCTYPE html>
<html>
<head>
    <title>SSE Distributed Demo - HTTP/2 Load Balancer</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; }
        .status { color: #28a745; font-weight: bold; }
        .links { margin: 20px 0; }
        .links a { display: block; margin: 10px 0; color: #007bff; text-decoration: none; }
        .links a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ SSE Distributed Demo</h1>
        <p class="status">‚úÖ HTTP/2 Load Balancer is running</p>
        <div class="links">
            <h3>üîó Available Services:</h3>
            <a href="/health">üè• Health Check</a>
            <a href="/api/sse/metrics">üìä System Metrics</a>
            <a href="/api/sse/servers">üñ•Ô∏è Available Servers</a>
            <a href="http://localhost:3000" target="_blank">üé® Frontend (HTTP)</a>
            <a href="https://localhost:3443" target="_blank">üé® Frontend (HTTPS)</a>
        </div>
        <p><small>HTTP/2 + SSL Enabled | Load Balancer</small></p>
    </div>
</body>
</html>';
        }
    }
} 